<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Musl on Nouxia&#39;s Notes</title>
    <link>http://localhost:1313/tags/musl/</link>
    <description>Recent content in Musl on Nouxia&#39;s Notes</description>
    <generator>Hugo -- 0.147.9</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Jul 2025 21:58:08 +0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/musl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>File Stream Oriented Programming (FSOP) on Musl Libc</title>
      <link>http://localhost:1313/posts/musl-fsop-arkavidia-2025/</link>
      <pubDate>Thu, 03 Jul 2025 21:58:08 +0700</pubDate>
      <guid>http://localhost:1313/posts/musl-fsop-arkavidia-2025/</guid>
      <description>&lt;p&gt;A couple months ago, I participated in a local CTF in which there was a very interesting pwn challenge authored by msfir, named &lt;code&gt;www-0&lt;/code&gt;. The main twist of the challenge was that it&amp;rsquo;s run on an Alpine Linux container, unlike other challenges which usually run on an Ubuntu or Debian container. Since Alpine uses musl instead of glibc as its standard C library, this has the consequence that the binary will be linked to a musl libc, as opposed to the usual glibc. While mostly identical in function, musl is different in implementation when compared to glibc. So, some exploits that work on glibc might not automatically work on musl libc. In this writeup, we&amp;rsquo;ll be exploring how musl libc is implemented, specifically how it handles files and its exit procedures.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
